import heapq

class Graph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.adjacency_list = [[] for _ in range(vertices)]

    def add_edge(self, source, destination, weight=1):
        self.adjacency_list[source].append((destination, weight))
        self.adjacency_list[destination].append((source, weight))  # For undirected graph

    def dfs(self, start_vertex):
        visited = [False] * self.vertices
        self._dfs_util(start_vertex, visited)

    def _dfs_util(self, vertex, visited):
        visited[vertex] = True
        print(vertex, end=' ')

        for adj, _ in self.adjacency_list[vertex]:
            if not visited[adj]:
                self._dfs_util(adj, visited)

    def bfs(self, start_vertex):
        visited = [False] * self.vertices
        queue = [start_vertex]
        visited[start_vertex] = True

        while queue:
            vertex = queue.pop(0)
            print(vertex, end=' ')

            for adj, _ in self.adjacency_list[vertex]:
                if not visited[adj]:
                    queue.append(adj)
                    visited[adj] = True

    def dijkstra(self, start_vertex):
        distances = [float('inf')] * self.vertices
        distances[start_vertex] = 0
        priority_queue = [(0, start_vertex)]

        while priority_queue:
            current_distance, current_vertex = heapq.heappop(priority_queue)

            if current_distance > distances[current_vertex]:
                continue

            for neighbor, weight in self.adjacency_list[current_vertex]:
                distance = current_distance + weight

                if distance < distances[neighbor]:
                    distances[neighbor] = distance
                    heapq.heappush(priority_queue, (distance, neighbor))

        print("Dijkstra's Algorithm:")
        for vertex, distance in enumerate(distances):
            print(f"Vertex {vertex} is at distance {distance}")

    def kruskal(self):
        parent = list(range(self.vertices))
        edges = []

        for u in range(self.vertices):
            for v, weight in self.adjacency_list[u]:
                edges.append((weight, u, v))

        edges.sort()
        mst_cost = 0

        def find(x):
            if parent[x] == x:
                return x
            parent[x] = find(parent[x])
            return parent[x]

        def union(x, y):
            root_x = find(x)
            root_y = find(y)
            if root_x != root_y:
                parent[root_x] = root_y

        print("Kruskal's Algorithm:")
        for weight, u, v in edges:
            if find(u) != find(v):
                union(u, v)
                mst_cost += weight
                print(f"Edge: {u} - {v} weight: {weight}")

        print(f"Total cost of MST: {mst_cost}")

# Example usage
if __name__ == "__main__":
    graph = Graph(5)
    graph.add_edge(0, 1)
    graph.add_edge(0, 4)
    graph.add_edge(1, 2)
    graph.add_edge(1, 3)
    graph.add_edge(1, 4)
    graph.add_edge(2, 3)
    graph.add_edge(3, 4)

    print("DFS:")
    graph.dfs(0)

    print("\nBFS:")
    graph.bfs(0)

    print("\nDijkstra's Algorithm:")
    graph.dijkstra(0)

    print("\nKruskal's Algorithm:")
    graph.kruskal()